@use 'sass:list';
@use 'true' as *;
@use 'lib' as *;

@include test-module('Basics') {
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // to-string() [Function]
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  @include describe('String convertion of simple values') {
    $values: ('test', 4, 4dpi, 4%, 4deg, 4Hz, 4px, 4vh, true, false, null, #420420);
    $strings: ('test', '4', '4dpi', '4%', '4deg', '4Hz', '4px', '4vh', 'true', 'false', '', '#420420');
    @for $i from 1 through list.length($values) {
      $v: list.nth($values, $i);
      $s: list.nth($strings, $i);

      @include it('converts to #{$s}') {
        @include assert-equal($s, to-string($v));
      }
    }
  }
  @include describe('String convertion of lists') {
    @include it('converts a list of strings') {
      @include assert-equal('(a,b,c)', to-string(('a', 'b', 'c')));
    }
    @include it('converts a list of strings with a space separator') {
      @include assert-equal('(a b c)', to-string(('a' 'b' 'c')));
    }
    @include it('converts a list of other values') {
      @include assert-equal('(1,true,#420420)', to-string((1, true, #420420)));
    }
    @include it('converts a list of nested lists') {
      @include assert-equal('(a,b,c,(a,b,c))', to-string(('a', 'b', 'c', ('a', 'b', 'c'))));
    }
  }
  @include describe('String convertion of maps') {
    @include it('converts a map of strings') {
      @include assert-equal(
        '(a:A,b:B,c:C)',
        to-string(
          (
            a: 'A',
            b: 'B',
            c: 'C',
          )
        )
      );
    }
    @include it('converts a map of other values') {
      @include assert-equal(
        '(a:1,b:true,c:#420420)',
        to-string(
          (
            a: 1,
            b: true,
            c: #420420,
          )
        )
      );
    }
    @include it('converts a map of strings') {
      @include assert-equal(
        '(a:A,b:B,c:C,d:(a:A,b:B,c:C))',
        to-string(
          (
            a: 'A',
            b: 'B',
            c: 'C',
            d: (
              a: 'A',
              b: 'B',
              c: 'C',
            ),
          )
        )
      );
    }
  }
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // capitalize($string) [Function]
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  @include describe('capitalize()') {
    $map: (
      A: 'value-A',
      B: 'value-B',
      C: 'value-C',
    );
    // Correct input
    @include it('Returns a string with the first letter turned to uppercase.') {
      @include assert-equal(capitalize('test test'), 'Test test');
    }
    // Incorrect input
    @include it('[Value Error] Returns null') {
      @include assert-equal(capitalize(0), '');
    }
  }
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // list-join-many($lists...) [Function]
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  @include describe('list-join-many()') {
    @include it('Returns the joined lists') {
      $a: (10px, 20px, 30px);
      $b: (40px, 50px, 60px);
      $ab: list.join($a, $b);
      @include assert-equal(list-join-many($a, $b), $ab);
      $c: (70px, 80px, 90px);
      $abc: list.join($ab, $c);
      @include assert-equal(list-join-many($a, $b, $c), $abc);
    }
  }
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // map-next-key($map, $current-key) [Function]
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  @include describe('next-key-in-map()') {
    $map: (
      A: 'value-A',
      B: 'value-B',
      C: 'value-C',
    );
    // Correct input
    @include it('Returns the next key when found.') {
      @include assert-equal(map-next-key($map, 'A'), 'B');
    }
    // Correct input - last
    @include it('Returns null when the key is the last.') {
      @include assert-equal(map-next-key($map, 'C'), null);
    }
    // Incorrect input - missing
    @include it('[Indexing Error] Returns -1 when the key is not found in the map.') {
      @include assert-equal(map-next-key($map, 'X'), -1);
    }
    // Incorrect input - incorrect type
    @include it('[Value Error] Returns -1 when the input is not a map') {
      @include assert-equal(map-next-key(0, 'A'), -1);
    }
    // Incorrect input - incorrect type
    @include it('[Value Error] Returns -1 when the input is not a string') {
      @include assert-equal(map-next-key($map, 0), -1);
    }
  }
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // quick-mq($mq) [mixin]
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  @include describe('quick-mq()') {
    // Correct
    @include it('Creates a quick media query when the input is not null.') {
      @include assert() {
        @include output() {
          @media screen {
            display: block;
          }
        }

        @include expect() {
          @include quick-mq('screen') {
            display: block;
          }
        }
      }
    }
    // Incorrect
    @include it('Returns the content when the') {
      @include assert() {
        @include output() {
          display: block;
        }

        @include expect() {
          @include quick-mq(null) {
            display: block;
          }
        }
      }
    }
  }
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // quick-pseudo($pseudo) [mixin]
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  @include describe('quick-pseudo()') {
    // Correct
    @include it('Creates a quick pseudoclass when the input is not null.') {
      @include assert() {
        @include output() {
          &:nth-child(even) {
            display: block;
          }
        }

        @include expect() {
          @include quick-pseudo(':nth-child(even)') {
            display: block;
          }
        }
      }
    }
    // Incorrect
    @include it('Returns the content when the') {
      @include assert() {
        @include output() {
          display: block;
        }

        @include expect() {
          @include quick-pseudo(null) {
            display: block;
          }
        }
      }
    }
  }
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // map-to-styles($map, $prefix) [Mixin]
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  @include describe('map-to-styles()') {
    $map: (
      font-size: 16px,
      line-height: 20px,
      color: #089969,
    );
    @include it('Displays without suffix') {
      @include assert {
        @include output {
          span {
            @include map-to-styles($map);
          }
        }
        @include expect {
          span {
            font-size: 16px;
            line-height: 20px;
            color: #089969;
          }
        }
      }
    }
    @include it('Displays with suffix') {
      @include assert {
        @include output {
          :root {
            @include map-to-styles($map, '--');
          }
        }
        @include expect {
          :root {
            --font-size: 16px;
            --line-height: 20px;
            --color: #089969;
          }
        }
      }
    }
  }
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // substring-match($string, $substring, $selector) [Function]
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  @include describe('substring-match()') {
    $string: 'asdfghjkl';
    @include it('Tests that the string contains the substring') {
      @include assert-true(substring-match($string, 'fghj'));
    }
    @include it('Tests that the string starts with the substring') {
      @include assert-true(substring-match($string, 'asdf', '^'));
    }
    @include it('Tests that the string ends with the substring') {
      @include assert-true(substring-match($string, 'hjkl', '$'));
    }
  }
}
